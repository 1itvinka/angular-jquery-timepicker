angular.module("ui.timepicker",[]).value("uiTimepickerConfig",{step:15}).directive("uiTimepicker",["uiTimepickerConfig","$parse","$window",function(a,b,c){var d=function(a){return void 0!==c.moment&&c.moment.isMoment(a)&&a.isValid()},e=function(a){return angular.isDefined(a)&&null!==a&&(angular.isDate(a)||d(a))};return{restrict:"A",require:"ngModel",scope:{ngModel:"=",baseDate:"=",uiTimepicker:"="},priority:1,link:function(b,f,g,h){"use strict";var i=angular.copy(a),j=i.asMoment||!1;delete i.asMoment,h.$render=function(){var a=h.$modelValue;if(angular.isDefined(a)&&null!==a&&!e(a))throw new Error("ng-Model value must be a Date or Moment object - currently it is a "+typeof a+".");d(a)&&(a=a.toDate()),f.is(":focus")||f.timepicker("setTime",a)},b.$watch(g.ngModel,function(){h.$render()},!0),i.appendTo=f.parent(),f.timepicker(angular.extend(i,b.uiTimepicker?b.uiTimepicker:{}));var k=function(){var a=h.$modelValue?h.$modelValue:b.baseDate;return d(a)?a.toDate():a},l=function(a){return j?c.moment(a):a};f.is("input")?h.$parsers.unshift(function(){var a=f.timepicker("getTime",k());return h.$setValidity("time",null!==a),l(a)}):f.on("changeTime",function(){b.$evalAsync(function(){var a=f.timepicker("getTime",k());h.$setViewValue(a)})})}}}]);